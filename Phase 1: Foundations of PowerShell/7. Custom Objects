### Introduction to Custom Objects in PowerShell

In PowerShell, objects are everywhere—they're the building blocks of scripts and commands. Every time you run a command, it returns an object or an array of objects. However, there are times when the built-in objects just aren’t enough to represent the data or logic you're working with. That’s where custom objects come in!

**Custom objects** allow you to define your own structure to hold data, making your scripts more organized, readable, and powerful. You can store multiple properties and methods in a single object, giving you flexibility in managing complex data structures. Whether you’re working with scripts that generate reports or handling data that doesn’t fit neatly into PowerShell's standard types, custom objects let you tailor your objects to your needs.

### Why are Custom Objects Important?

- **Enhanced Data Handling:** Custom objects enable you to represent complex data that doesn’t fit into existing object types.
- **Readability and Maintainability:** Your scripts are easier to understand when you use well-structured custom objects, which helps with debugging and collaborating.
- **Flexibility:** You can manipulate and extend objects to fit your specific needs without relying on predefined types.

#### Exercise: Why Do You Need Custom Objects?

Think of a scenario in which you’re generating a report from various pieces of data: the user name, the department, and their login count. Why might it be more effective to create a custom object rather than using an array or hash table? Write a short PowerShell script to see the difference.

---

### The Structure of Custom Objects

A custom object in PowerShell is essentially a container that holds properties and, optionally, methods. A **property** is a value or characteristic of the object, such as a name or a number. A **method** is an action that the object can perform, like calculating or transforming data.

#### Creating Custom Objects

There are multiple ways to create custom objects in PowerShell:

1. **Using `New-Object`**: 
   ```powershell
   $myObject = New-Object PSObject -Property @{
       Name = "John"
       Age = 30
       Department = "IT"
   }
   ```
   This method allows you to create an object and populate it with properties in a hashtable.

2. **Using `[PSCustomObject]`**:
   ```powershell
   $myObject = [PSCustomObject]@{
       Name = "John"
       Age = 30
       Department = "IT"
   }
   ```
   This is a more modern and efficient way to create custom objects in PowerShell and is preferred in most cases.

#### Exercise: Create a Custom Object

Write a PowerShell script to create a custom object representing a book. The object should have the properties: `Title`, `Author`, `YearPublished`, and `Price`. Use both methods (`New-Object` and `[PSCustomObject]`) and compare them.

---

### Adding and Removing Properties in Custom Objects

Once a custom object is created, you can dynamically add or remove properties.

#### Adding Properties
You can add properties to a custom object at any time after its creation:

```powershell
$myObject = [PSCustomObject]@{
    Name = "Alice"
    Age = 25
}

# Adding a new property
$myObject.City = "New York"
```

#### Removing Properties
There’s no direct built-in method to remove a property, but you can recreate the object without the unwanted property:

```powershell
$myObject = $myObject | Select-Object -Property Name, Age
```

#### Exercise: Manipulate Properties

1. Create a custom object representing a car with properties like `Make`, `Model`, `Year`, and `Color`.
2. Add a new property `Owner`.
3. Remove the `Color` property without recreating the entire object.

---

### Useful Methods and Properties in Custom Objects

Custom objects themselves don't typically come with built-in methods, but you can add script methods to perform specific actions.

#### Adding Methods to Custom Objects
You can add script methods to your custom objects to enhance functionality:

```powershell
$myObject = [PSCustomObject]@{
    Name = "Dave"
    Age = 40
}

$myObject | Add-Member -MemberType ScriptMethod -Name "GetInfo" -Value {
    "Name: $($this.Name), Age: $($this.Age)"
}

$myObject.GetInfo()
```

#### Accessing Properties
You access properties simply by calling them using the dot notation:

```powershell
$myObject.Name  # Outputs the Name property value
```

#### Exercise: Add Methods to a Custom Object

1. Create a custom object representing a `Student` with properties: `FirstName`, `LastName`, and `Grade`.
2. Add a method `GetFullName` that returns the student's full name (combining `FirstName` and `LastName`).
3. Add another method `HasPassed` that returns `True` if the `Grade` is 50 or higher, and `False` otherwise.

---

### Custom Object Best Practices

#### 1. Use `[PSCustomObject]` for Efficiency
Whenever possible, prefer `[PSCustomObject]` over `New-Object` for performance reasons. `[PSCustomObject]` is faster and more lightweight, especially for large datasets.

#### 2. Define Object Templates
If you find yourself frequently creating the same types of objects, consider defining a reusable template. This will keep your code clean and consistent:

```powershell
function Create-Customer {
    param($Name, $Age, $Email)

    [PSCustomObject]@{
        Name  = $Name
        Age   = $Age
        Email = $Email
    }
}

$customer = Create-Customer -Name "John Doe" -Age 35 -Email "john@example.com"
```

#### Exercise: Create a Custom Object Template

Define a function that generates custom objects for `Employees`. The function should accept parameters like `Name`, `Position`, and `Salary`, and return a well-structured custom object. Add a method to the custom object that calculates the employee's yearly bonus (5% of their salary).

---

### Conclusion

Custom objects in PowerShell are essential for working with complex data structures and improving the readability and maintainability of your scripts. They allow you to go beyond the limits of built-in types and represent data in a way that makes sense for your specific tasks.

#### Final Exercise: Putting it All Together

Create a custom object representing a `Person`, with properties for `FirstName`, `LastName`, and `BirthYear`. Add methods to calculate the person's age, format their full name, and determine if they are an adult (18 or older).
